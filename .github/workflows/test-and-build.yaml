name: Test & Build
on:
  schedule:
    - cron: '0 2 * * *'
  push:
    branches:
      - dev
    paths-ignore:
      - '.github/**'
  pull_request:
  release:
    types: [ published ]
  workflow_dispatch:

env:
  aptCacher: ''
  ARCH: amd64
  BUILD_NOCACHE: false
  DOCKER_PUSH: true
  DEBIAN_VERSION: bullseye-slim
  S6_OVERLAY_VERSION: 3.1.4.0
  IMAGE: pihole
  PIHOLE_DOCKER_TAG: latest
  NAME: edgd1er/pihole
  PHP_ENV_CONFIG: /etc/lighttpd/conf-enabled/15-fastcgi-php.conf
  PHP_ERROR_LOG: /var/log/lighttpd/error.log

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
      - name: Run Tests
        run: |
          echo "Building ${{ env.ARCH }}-${{ env.DEBIAN_VERSION }}"
          ./build-and-test.sh

  build-and-publish:
    if: github.event_name != 'pull_request'
    # If only readme has been touched, for example, then the `test` job will have been skipped. This job will therefore be skipped, too.
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        if: github.event_name != 'schedule'
        uses: actions/checkout@v3
      - name: Checkout dev branch if we are building nightly
        if: github.event_name == 'schedule'
        uses: actions/checkout@v3
        with:
          ref: dev
      - name: set github ref
        run: |
          echo "GITHUB_REF=${{ github.ref }}" >> $GITHUB_ENV
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: latest
          install: true
          use: true
      - name: Cache Docker layers
        uses: actions/cache@v3
        id: cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          images: |
            ${{ secrets.DOCKERHUB_USER }}/pihole
          flavor: |
            latest=${{ startsWith(env.GITHUB_REF, 'refs/heads/master')  && ( github.event_name != 'schedule' ) }}
            prefix=,onlatest=true
          tags: |
            # if scheduled start => tag as nightly
            type=schedule,pattern=nightly
            # if push, get branch name
            type=ref,event=branch,enable=${{ github.event_name != 'schedule' }} 
            # if push, get tag name
            type=ref,event=tag
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        if: ${{ false }}
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: src/
          platforms: linux/amd64, linux/arm64, linux/386, linux/arm/v7, linux/arm/v6
          build-args: |
            S6_OVERLAY_VERSION=${{ env.S6_OVERLAY_VERSION }}
            PIHOLE_DOCKER_TAG=${{ steps.meta.outputs.version }}
            DEBIAN_VERSION=${{ env.DEBIAN_VERSION }}
            NAME=edgd1er/pihole
          push: true
          provenance: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USER }}/pihole:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USER }}/pihole:buildcache,mode=max
      - name: Inspect builder
        run: |
          echo "Name:      ${{ steps.build-and-publish.outputs.name }}"
          echo "Endpoint:  ${{ steps.build-and-publish.outputs.endpoint }}"
          echo "Status:    ${{ steps.build-and-publish.outputs.status }}"
          echo "Flags:     ${{ steps.build-and-publish.outputs.flags }}"
          echo "Platforms: ${{ steps.build-and-publish.outputs.platforms }}"
